package Patient;

import static Shared.SanityCheck.nullCheck;
import static Shared.SanityCheck.numCheck;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Objects;

import Shared.FileReading;
import Shared.SanityCheck;
import menus.Main;

/**
 * Main class of patient. Patients can access the menu and add themselves to the
 * database if they are a new patient, book appointments, view their
 * appointments, reschedule appointments, view medical records and view past
 * appointments and treatments.
 * 
 * @author Grover EKhnoor Kaur
 * @author Cheng Jun Long Brandon
 * @author Nadathur Ammal Shreya Sudharshan
 */

public class PatientLogin {
	/**
	 * Initializes patientLogin
	 */
	public PatientLogin() {
	}

	/**
	 * menu Patients are able to choose from a menu and add themselves to the
	 * database if they are a new patient, book appointments, view their
	 * appointments.
	 * 
	 * @param patient1 the logged-in patient who can viewing medical records,
	 *                 scheduling, rescheduling, and canceling appointments.
	 * @throws ClassNotFoundException when a class definition cannot be found during
	 *                                deserialization.
	 * @throws IOException            when there is an error while reading or
	 *                                writing files.
	 */
	public static void patientMenu(Patient patient1) throws ClassNotFoundException, IOException {
		int choice = 0;
		do {
			System.out.println("\n--- Patient Management System ---");
			System.out.println("1. View Medical Record"); // shift this to the user login
			System.out.println("2. Update medical record");
			System.out.println("3. View Available Appointment Slots");
			System.out.println("4. Schedule an Appointment");
			System.out.println("5. Reschedule Appointment");
			System.out.println("6. Cancel Appointment");
			System.out.println("7. View Scheduled Appointments");
			System.out.println("8. View Past Appointments and Treatments");
			System.out.println("9. Change Password");
			System.out.println("10. Exit");
			System.out.print("Choose an option: ");

			choice = SanityCheck.numCheck();
			switch (choice) {
			case 1:
				patient1.viewMedicalRecord();
				break;
			case 2:
				ArrayList<Patient> listOfPatient = new ArrayList<>();
				listOfPatient = FileReading.getPatientList();
				for (Patient patient : listOfPatient) {
					if (Objects.equals(patient.getID(), patient1.getID())) {
						System.out.println("Enter new email");
						String email = nullCheck();
						System.out.println("Enter new number");
						int number = numCheck();
						patient.updateContactInfo(number, email);
						System.out.println("your details have been updated");
						patient1 = patient;
						FileReading.serializing(listOfPatient, "ListOfPatient.ser");
					}
				}
				break;
			case 3:
				patient1.viewAppointment();
				break;
			case 4:
				patient1.booking();
				break;
			case 5:
				patient1.rescheduleAppointment();
				break;
			case 6:
				patient1.cancelAppointment();
				break;
			case 7:
				patient1.viewScheduledAppointments();
				break;
			case 8:
				patient1.viewPastApptmentOutcome();
				break;
			case 9:
				patient1.changePassword();
				break;
			case 10:
				System.out.println("Thank you for using our services, Have a great time!");
				Main.login();
				break;
			default:
				System.out.println("Invalid choice. Please select a valid option."); // something wrong here
				break;
			}
		} while (choice != 10);
	}

	/**
	 * Registers a new patient by asking the user for their personal details,
	 * creating a new patient object, and adding them to the patient list. The
	 * patient's ID is generated by concatenating "PA" with a unique number based on
	 * the list size. The patient list is then serialized to save the new entry.
	 * 
	 * @throws IOException            If there is an error while reading or writing
	 *                                files.
	 * @throws ClassNotFoundException If a class definition cannot be found during
	 *                                deserialization.
	 */
	public static void newPatient() throws IOException, ClassNotFoundException {
		ArrayList<Patient> listOfPatient = FileReading.getPatientList();
		// Get user input
		System.out.print("Please enter Name: ");
		String name = nullCheck();
		System.out.print("Please enter Password: ");
		String password = nullCheck();
		System.out.print("Please enter Email: ");
		String email = nullCheck();
		System.out.print("Please enter Gender: ");
		String gender = nullCheck();

		System.out.println("\nPlease enter year of birth");
		int year = numCheck();
		System.out.println("\nPlease enter month of birth");
		int month = numCheck() - 1;
		System.out.println("\nPlease enter day of birth");
		int day = numCheck();
		Calendar dateOfBirth = new GregorianCalendar(year, month, day);

		System.out.print("Please enter Contact Number: ");
		int contactNumber = numCheck();
		System.out.print("Please enter Blood Type: ");
		String bloodType = nullCheck();

		String ID = "PA".concat(FileReading.getNumber(listOfPatient.size()));

		// Create new Patient object and add to list
		Patient newPatient = new Patient(ID, name, password, email, contactNumber, gender, dateOfBirth, bloodType);

		listOfPatient.add(newPatient);
		FileReading.serializing(listOfPatient, "ListOfPatient.ser");
	}
}
